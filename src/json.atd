type tile_layer = {
  name : string;
  (* these ints are (gid - firstgid) *)
  data : int list;
  h <json name="height"> : int;
  w <json name="width"> : int;
  ~parallax_x <ocaml default="1.0"> <json name="parallaxx"> : float;
  ~parallax_y <ocaml default="1.0"> <json name="parallaxy"> : float;
  (* offsets are in px, not tiles *)
  ~offset_x <ocaml default="0.0"> <json name="offsetx"> : float;
  ~offset_y <ocaml default="0.0"> <json name="offsety"> : float;
}

type image_layer = {
  name : string;
  image : string;
}

type object_layer = {
  name : string;
  objects : coll_rect list;
}

type coll_rect = {
  ~gid : int;
  name : string;
  x : float;
  y : float;
  h <json name="height"> : float;
  w <json name="width"> : float;
}

(* the Type_field adapter pulls out the "type" field from json
   from: { ..., "type": "some-type", ... }
   into: ["some-type", { ... }]
 *)
type layer = [
    TILE_LAYER <json name="tilelayer"> of tile_layer |
    IMAGE_LAYER <json name="imagelayer"> of image_layer |
    OBJECT_LAYER <json name="objectgroup"> of object_layer
] <json adapter.ocaml="Atdgen_runtime.Json_adapter.Type_field">

(* TODO see how polygons are exported (for collision shapes) *)
type object_group = {
  objects : coll_rect list;
}

type collision = {
  id : int;
  objectgroup : object_group;
}

type tileset = {
  name : string;
  tile_h <json name="tileheight"> : float;
  tile_w <json name="tilewidth">  : float;
  source <json name="image"> : string;
  columns : int;
  (* only tiles with custom collision rects have a config here
     - this is also used for image-based tilesets' images
  *)
  ~collisions <json name="tiles"> : collision list;
  tile_count <json name="tilecount"> : int;
}

type tileset_source = {
  firstgid: int;
  source : string;
}

type room = {
  tile_h <json name="tileheight"> : float;
  tile_w <json name="tilewidth">  : float;
  h_in_tiles <json name="height"> : int;
  w_in_tiles <json name="width"> : int;
  layers : layer list;
  tileset_sources <json name="tilesets"> : tileset_source list;
}

type global_map = {
  file_name <json name="fileName"> : string;
  x : int;
  y : int;
  h_in_pixels <json name="height"> : int;
  w_in_pixels <json name="width"> : int;
}

type world = {
  global_maps <json name="maps"> : global_map list;
}

(*
 configs below this are not Tiled-specific
*)

type jug_metadata = {
  name : string;
  x : int;
  ~w <ocaml default="2"> : int;
  h : int;
}

type jug_metadata_file = jug_metadata list

type lore_file = (string * string) list
type keybinds_file = (string * string) list

type color = {
  r : int;
  g : int;
  b : int;
  a : int;
}

type weapon = {
  tint : color;
  pickup_text : string;
  damage : int;
  scale_x : float;
  scale_y : float;
  (* - old-nail speed is 1.0, and any lower than that feels too slow (even for eg. very strong weapon)
     - max value with current configs is 1.6, since anything faster than that allows a constant attack
  *)
  swing_speed : float;
}

type weapons_file = (string * weapon) list

type texture_config = {
  ~count <ocaml default="1"> : int;
  ~duration <ocaml default="0.066666"> : float;
  ~x_offset <ocaml default="0"> : int;
  ~y_offset <ocaml default="0"> : int;
}

type enemy_dream_nail_config = {
  ~dialogues <ocaml default="[]"> : string list;
  ~recoil_vx <ocaml default="1800.0"> : float;
  ~vulnerable <ocaml default="true"> : bool;
}

type texture_configs = (string * texture_config) list

type enemy_config = {
  w : int;
  h : int;
  health : int;
  (* TODO maybe use default "enemy", or maybe split into separate keys
     "enemies"/"bosses"/"multi-bosses" in enemies_file *)
  kind : string;
  ~damage <ocaml default="1"> : int;
  ~gravity_multiplier <ocaml default="1.0"> : float;
   (* TODO not sure about this, maybe would be better to just check enemy_id when
      an enemy dies and only update based on that
   *)
  ~death_gravity_multiplier <ocaml default="1.0"> : float;
  ~can_take_damage <ocaml default="true"> : bool;
  (* TODO getting a syntax error from atd when trying to use default="{}" *)
  dream_nail : enemy_dream_nail_config;
  ~props <ocaml default="[]"> : (string * float) list;
  texture_configs : texture_configs;
}

type enemies_file =
  {
    enemies : (string * enemy_config) list;
    shared_textures : (string * texture_config) list;
  }

type ghost_action = {
  ~duration <ocaml default="0.066666"> : float;
  ~cooldown <ocaml default="0.0"> : float;
  ~input_buffer <ocaml default="0.0"> : float;
  ~collision_shape : (float * float) list;
}

type ghosts_file = {
  (* head_textures_by_ghost : (string * texture_configs) list; *)
  body_textures : texture_configs;
  shared_textures : texture_configs;
  actions : (string * ghost_action) list;
}

type npc_config = {
  w : int;
  h : int;
  texture_configs : (string * texture_config) list;
}

type npcs_file = {
  npcs : (string * npc_config) list;
  shared_textures : (string * texture_config) list;
}

(* this progress is permanently saved so eg. removed_idxs_by_layer is for doors that are permanently removed, but
   not for jugs (which respawn when the room is re-entered, and are tracked by layer.tile_groups / .destroyed_tiles)
*)
type room_progress = {
  removed_idxs_by_layer <ocaml mutable> : (string * int list) list;
  finished_interactions <ocaml mutable> : string list;
  revealed_shadow_layers <ocaml mutable> : string list;
}

type ghost_abilities = {
  (* movement *)
  crystal_heart <ocaml mutable> : bool;
  ismas_tear <ocaml mutable> : bool;
  mantis_claw <ocaml mutable> : bool;
  monarch_wings <ocaml mutable> : bool;
  mothwing_cloak <ocaml mutable> : bool;
  shade_cloak <ocaml mutable> : bool;
  (* spells *)
  vengeful_spirit <ocaml mutable> : bool;
  desolate_dive <ocaml mutable> : bool;
  howling_wraiths <ocaml mutable> : bool;
}

type steel_sole_progress = {
  purple_pens_found <ocaml mutable> : (int * string) list;
  dunks <ocaml mutable> : int;
  c_dashes <ocaml mutable> : int;
  frame_idx <ocaml mutable> : int;
}


type game_progress = {
  steel_sole : steel_sole_progress;
  by_room <ocaml mutable> : (string * room_progress) list;
}

type save_file = {
  ghost_id : string;
  game_mode : string;
  ghost_x : float;
  ghost_y : float;
  respawn_x : float;
  respawn_y : float;
  ghosts_in_party <ocaml mutable> : string list;
  room_name : string;
  abilities : ghost_abilities;
  weapons : string list;
  current_weapon : string;
  progress : game_progress;
}
